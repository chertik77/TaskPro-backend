{
  "openapi": "3.1.0",
  "info": {
    "version": "2.2.0",
    "title": "Task Pro API",
    "description": "The Task Pro API provides endpoints to manage projects and user assignments, ensuring secure and efficient request handling.",
    "contact": {
      "name": "TaskPro",
      "url": "https://www.taskpro.online"
    }
  },
  "servers": [
    { "url": "http://localhost:8000/api" },
    { "url": "https://api.taskpro.online" }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "qwerty123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/AuthResponse" },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "409": { "$ref": "#/components/responses/Conflict" }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Signin a user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "qwerty123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/AuthResponse" },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/auth/google/initiate": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get redirect url for Google authentication",
        "responses": {
          "200": { "$ref": "#/components/responses/GoogleInitiateResponse" }
        }
      }
    },
    "/auth/google/callback": {
      "post": {
        "tags": ["Auth"],
        "summary": "Handle Google OAuth callback and sign-in/sign-up",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["code", "state"],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "4/0AT5xKif_S_..."
                  },
                  "state": {
                    "type": "string",
                    "example": "1d73efc8d4f8d426a3e51f6337ee7cb7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/GoogleResponse" },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get new access and refresh tokens",
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "200": { "$ref": "#/components/responses/RefreshResponse" },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout a user",
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "204": { "description": "The user was logged out successfully." },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user",
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "200": { "$ref": "#/components/responses/UserResponse" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/user/help": {
      "post": {
        "tags": ["User"],
        "summary": "Send email need help",
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "comment"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Need help with the Kanban board feature."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sent"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/user": {
      "patch": {
        "tags": ["User"],
        "summary": "Edit user profile",
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "example": "Jane Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "jane.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "newsecurepassword123"
                  },
                  "theme": {
                    "type": "string",
                    "enum": ["light", "dark", "violet"],
                    "example": "dark"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/UserResponse" },
          "400": { "$ref": "#/components/responses/BadRequestError" },
          "406": { "$ref": "#/components/responses/NotAcceptable" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "409": { "$ref": "#/components/responses/Conflict" }
        }
      }
    },
    "/board": {
      "get": {
        "tags": ["Board"],
        "summary": "Get all boards",
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "200": { "$ref": "#/components/responses/AllBoardsResponse" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      },
      "post": {
        "tags": ["Board"],
        "summary": "Add new board",
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "icon"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "My New Project"
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "project",
                      "star",
                      "loading",
                      "puzzle",
                      "container",
                      "lightning",
                      "colors",
                      "hexagon"
                    ],
                    "example": "project"
                  },
                  "background": {
                    "type": "string",
                    "example": "blue-ball"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/BoardResponse" },
          "400": { "$ref": "#/components/responses/BoardBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/board/{boardId}": {
      "get": {
        "tags": ["Board"],
        "summary": "Get board by id",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "200": { "$ref": "#/components/responses/BoardByIdResponse" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "patch": {
        "tags": ["Board"],
        "summary": "Edit board by id",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Updated Project Office"
                  },
                  "icon": {
                    "type": "string",
                    "enum": [
                      "project",
                      "star",
                      "loading",
                      "puzzle",
                      "container",
                      "lightning",
                      "colors",
                      "hexagon"
                    ],
                    "example": "star"
                  },
                  "background": {
                    "type": "string",
                    "example": "flowers"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/BoardResponse" },
          "400": { "$ref": "#/components/responses/BoardBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Board"],
        "summary": "Delete board by id",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "204": { "description": "The resource was deleted successfully." },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/column/{boardId}": {
      "post": {
        "tags": ["Column"],
        "summary": "Add new column",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "To Do"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/ColumnResponse" },
          "400": { "$ref": "#/components/responses/ColumnBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/column/{boardId}/order": {
      "patch": {
        "tags": ["Column"],
        "summary": "Update columns order",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["ids"],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "example": [
                      "67470731ed1b2ff3a2e5bd56",
                      "67470773c750b6298e1892ad",
                      "67470737ed1b2ff3a2e5bd57"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateColumnsOrderResponse"
          },
          "400": { "$ref": "#/components/responses/UpdateOrderBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/column/{columnId}": {
      "patch": {
        "tags": ["Column"],
        "summary": "Edit column by id",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Doing"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/ColumnResponse" },
          "400": { "$ref": "#/components/responses/ColumnBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Column"],
        "summary": "Delete column by id",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "204": { "description": "The resource was deleted successfully." },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/card/{columnId}": {
      "post": {
        "tags": ["Card"],
        "summary": "Add new card",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description", "priority", "deadline"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Publication of the project"
                  },
                  "description": {
                    "type": "string",
                    "example": "Review the project materials: Familiarize yourself with the project's content, including text, images, and any supplementary materials."
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-10-15"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["Without", "Low", "Medium", "High"],
                    "example": "High"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/CardResponse" },
          "400": { "$ref": "#/components/responses/CardBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/card/{columnId}/order": {
      "patch": {
        "tags": ["Card"],
        "summary": "Update cards order",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["ids"],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[0-9a-fA-F]{24}$"
                    },
                    "example": [
                      "6672fdccc07147fc7ae1bb93",
                      "6743474be4006eca6c8122e7"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/UpdateCardOrderResponse" },
          "400": { "$ref": "#/components/responses/UpdateOrderBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/card/{cardId}": {
      "patch": {
        "tags": ["Card"],
        "summary": "Edit card by id",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Final Project Review"
                  },
                  "description": {
                    "type": "string",
                    "example": "Review and finalize all project documentation."
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-11-01"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["Without", "Low", "Medium", "High"],
                    "example": "Low"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "$ref": "#/components/responses/CardResponse" },
          "400": { "$ref": "#/components/responses/CardBadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Card"],
        "summary": "Delete card by id",
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "security": [{ "CookieAuth": [] }],
        "responses": {
          "204": { "description": "The resource was deleted successfully." },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "674723719b47fd08e6a2d517"
          },
          "name": { "type": "string", "example": "John Doe" },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "theme": {
            "type": "string",
            "enum": ["light", "dark", "violet"],
            "example": "light"
          },
          "avatar": {
            "type": "string",
            "format": "url",
            "example": "https://res.cloudinary.com/dmbnnewoy/image/upload/v1706958682/TaskPro/user_avatar_default/user_light.png"
          },
          "avatarPublicId": {
            "type": "string",
            "nullable": true,
            "example": null
          }
        }
      },
      "AuthResponseSchema": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/User" }
        },
        "description": "User object returned upon successful authentication. Access and refresh tokens are set as HTTP-only cookies. In production, they are also secure cookies."
      },
      "BoardBackground": {
        "type": "object",
        "properties": {
          "identifier": { "type": "string", "example": "flowers" },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://res.cloudinary.com/dmbnnewoy/image/upload/v1707099093/TaskPro/board_bg_images/desk/nfxep55xgvpq7xitemq1.jpg"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6672fdccc07147fc7ae1bb93"
          },
          "title": {
            "type": "string",
            "example": "Publication of the project"
          },
          "description": {
            "type": "string",
            "example": "Review the project materials: Familiarize yourself with the project's content, including text, images, and any supplementary materials."
          },
          "priority": {
            "type": "string",
            "enum": ["Without", "Low", "Medium", "High"],
            "example": "High"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-15T00:00:00.000Z"
          },
          "order": { "type": "integer", "example": 1 },
          "columnId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6671743db85c96453e04a684"
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6672f604c07147fc7ae1bb81"
          },
          "title": { "type": "string", "example": "In progress" },
          "order": { "type": "integer", "example": 1 },
          "boardId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "67470718ed1b2ff3a2e5bd55"
          },
          "cards": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Card" }
          }
        }
      },
      "Board": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6672f1d2f02c8b04130c718c"
          },
          "title": { "type": "string", "example": "Project office" },
          "icon": {
            "type": "string",
            "enum": [
              "project",
              "star",
              "loading",
              "puzzle",
              "container",
              "lightning",
              "colors",
              "hexagon"
            ],
            "example": "project"
          },
          "background": { "$ref": "#/components/schemas/BoardBackground" },
          "userId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6671743db85c96453e04a684"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "integer", "example": 400 },
          "message": {
            "oneOf": [{ "type": "string" }, { "type": "object" }]
          }
        }
      }
    },
    "responses": {
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": { "statusCode": 404, "message": "Not found" }
            }
          }
        }
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 409,
                "message": "Provided email already exists"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": { "statusCode": 401, "message": "Unauthorized" }
            }
          }
        }
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": { "statusCode": 403, "message": "Forbidden" }
            }
          }
        }
      },
      "BadRequestError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 400,
                "message": {
                  "email": "Email is invalid",
                  "password": "Password must be at least 8 characters",
                  "name": "Name must be at least 2 characters"
                }
              }
            }
          }
        }
      },
      "NotAcceptable": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 406,
                "message": "File must have .jpeg or .png extension"
              }
            }
          }
        }
      },
      "AuthResponse": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AuthResponseSchema" }
          }
        },
        "headers": {
          "Set-Cookie": {
            "schema": {
              "type": "string",
              "example": "accessToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production), refreshToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production)"
            }
          }
        }
      },
      "GoogleInitiateResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "redirectUrl": {
                  "type": "string",
                  "format": "url",
                  "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&scope=email%20profile&access_type=offline"
                }
              }
            }
          }
        }
      },
      "GoogleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/AuthResponseSchema" },
                {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "avatar": {
                          "type": "string",
                          "format": "url",
                          "example": "https://lh3.googleusercontent.com/a/ACg8ocLWRkQo4yOicLduVfTehM7hCPx1Q7WGFjgOFu1GT"
                        },
                        "avatarPublicId": {
                          "type": "string",
                          "example": "google-picture"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "headers": {
          "Set-Cookie": {
            "schema": {
              "type": "string",
              "example": "accessToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production), refreshToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production)"
            }
          }
        }
      },
      "RefreshResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Tokens refreshed successfully"
                }
              }
            }
          }
        },
        "headers": {
          "Set-Cookie": {
            "schema": {
              "type": "string",
              "example": "accessToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production), refreshToken=eyJhbGci...; Path=/; HttpOnly; SameSite=Lax; Secure=true (only in production)"
            }
          }
        }
      },
      "UserResponse": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/User" }
          }
        }
      },
      "UpdateOrderBadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 400,
                "message": {
                  "ids": "Ids must be an array of valid ObjectIds"
                }
              }
            }
          }
        }
      },
      "AllBoardsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Board" }
            }
          }
        }
      },
      "BoardResponse": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Board" }
          }
        }
      },
      "BoardBadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 400,
                "message": {
                  "title": "Title must be at least 3 characters",
                  "icon": "Invalid enum value. Expected 'project' | 'star' | 'loading' | 'puzzle' | 'container' | 'lightning' | 'colors' | 'hexagon', received 'random-icon'"
                }
              }
            }
          }
        }
      },
      "BoardByIdResponse": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/Board" },
                {
                  "type": "object",
                  "properties": {
                    "columns": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          { "$ref": "#/components/schemas/Column" },
                          {
                            "type": "object",
                            "properties": {
                              "cards": {
                                "type": "array",
                                "items": { "$ref": "#/components/schemas/Card" }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ColumnResponse": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Column" }
          }
        }
      },
      "ColumnBadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 400,
                "message": {
                  "title": "Title must be at least 3 characters",
                  "boardId": "Id must be a valid ObjectId"
                }
              }
            }
          }
        }
      },
      "UpdateColumnsOrderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Column" }
            }
          }
        }
      },
      "CardResponse": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Card" }
          }
        }
      },
      "CardBadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse",
              "example": {
                "statusCode": 400,
                "message": {
                  "description": "Title must be a string",
                  "priority": "Priority must be one of the following: Without, Low, Medium, High",
                  "columnId": "Id must be a valid ObjectId"
                }
              }
            }
          }
        }
      },
      "UpdateCardOrderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Card" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "CookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "accessToken",
        "description": "Access token is sent as an HTTP-only cookie. In production, it is also a secure cookie."
      }
    }
  }
}
